function [methodinfo,structs,enuminfo,ThunkLibName]=core_debug_proto
%CORE_DEBUG_PROTO Create structures to define interfaces found in 'core_debug'.

%This function was generated by loadlibrary.m parser version  on Thu Jun 14 14:34:49 2018
%perl options:'core_debug.i -outfile=core_debug_proto.m -thunkfile=core_debug_kalimba_thunk_pcwin64.c -header=core_debug.h error_codes.h basic_library.h memaccess.h source_line.h connect.h call_stack.h language_types.h source_location.h functions.h symbol_files.h variables.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'core_debug_kalimba_thunk_pcwin64');
%  cd_version cd_get_version ( void ); 
fcns.thunkname{fcnNum}='cd_versionvoidThunk';fcns.name{fcnNum}='cd_get_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_version'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  cd_err cd_get_version_compat ( cd_version * version_info ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_get_version_compat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_versionPtr'};fcnNum=fcnNum+1;
%  char const * cd_get_core_type ( void ); 
fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='cd_get_core_type'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  cd_err cd_open ( coredbg ** cd ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_access_set ( coredbg * cd , bool value ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrboolThunk';fcns.name{fcnNum}='cd_access_set'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'bool'};fcnNum=fcnNum+1;
%  cd_err cd_close ( coredbg * cd ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_last_error ( const char ** buf ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_get_last_error'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_start_log ( coredbg * cd , char const * log_file_path ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringThunk';fcns.name{fcnNum}='cd_start_log'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring'};fcnNum=fcnNum+1;
%  cd_err cd_stop_log ( coredbg * cd ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_stop_log'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_string ( const char * str ); 
fcns.thunkname{fcnNum}='cd_errcstringThunk';fcns.name{fcnNum}='cd_free_string'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  cd_err cd_address_spaces_list_get ( coredbg * cd , cd_address_space const ** spaces , unsigned * num_spaces ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_address_spaces_list_get'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_address_spacePtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_program_address_space_index ( coredbg * cd , unsigned * addr_space_idx ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_program_address_space_index'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_data_address_space_index ( coredbg * cd , unsigned * addr_space_idx ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_data_address_space_index'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_logical_address ** cd_unpack_logical_address_list ( cd_logical_address_list const * address_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_logical_address_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_logical_addressPtrPtr'; fcns.RHS{fcnNum}={'cd_logical_address_listPtr'};fcnNum=fcnNum+1;
%  cd_logical_address * cd_access_logical_address_element ( cd_logical_address ** addresses , unsigned index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_access_logical_address_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_logical_addressPtr'; fcns.RHS{fcnNum}={'cd_logical_addressPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_free_logical_address ( cd_logical_address * logical_address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_logical_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_logical_addressPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_logical_address_list ( cd_logical_address_list * address_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_logical_address_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_logical_address_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_clone_logical_address ( cd_logical_address const * logical_address , cd_logical_address ** cloned ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_clone_logical_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_logical_addressPtr', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_logical_address_value ( cd_logical_address const * logical_address , int64_t offset_addressable_units , uint64_t * device_address , unsigned * address_space_index ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_logical_address_value'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_logical_addressPtr', 'int64', 'uint64Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_create_logical_address ( coredbg * cd , uint64_t base_device_address , int64_t offset_addressable_units , unsigned address_space_index , cd_logical_address ** logical_address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtruint64int64uint32voidPtrThunk';fcns.name{fcnNum}='cd_create_logical_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'uint64', 'int64', 'uint32', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_increment_logical_address_value ( cd_logical_address * logical_address , int64_t offset_addressable_units ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrint64Thunk';fcns.name{fcnNum}='cd_increment_logical_address_value'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_logical_addressPtr', 'int64'};fcnNum=fcnNum+1;
%  cd_err cd_compare_logical_addresses ( cd_logical_address const * lhs , cd_logical_address const * rhs , int * result ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_compare_logical_addresses'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_logical_addressPtr', 'cd_logical_addressPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_read_block8 ( coredbg * cd , cd_logical_address const * address , uint8_t * data , unsigned num_items ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_read_block8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'uint8Ptr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_read_block16 ( coredbg * cd , cd_logical_address const * address , uint16_t * data , unsigned num_items ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_read_block16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_read_block32 ( coredbg * cd , cd_logical_address const * address , uint32_t * data , unsigned num_items ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_read_block32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_write_block8 ( coredbg * cd , cd_logical_address const * address , uint8_t * data , unsigned num_items ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_write_block8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'uint8Ptr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_write_block16 ( coredbg * cd , cd_logical_address const * address , uint16_t * data , unsigned num_items ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_write_block16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_write_block32 ( coredbg * cd , cd_logical_address const * address , uint32_t * data , unsigned num_items ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_write_block32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_memory_map_load_from_file ( coredbg * cd , char const * path ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringThunk';fcns.name{fcnNum}='cd_memory_map_load_from_file'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring'};fcnNum=fcnNum+1;
%  cd_err cd_memory_map_load_from_dir ( coredbg * cd , char const * maps_dir , char const ** map_file_loaded ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='cd_memory_map_load_from_dir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_memory_map_get ( coredbg * cd , cd_memory_map * mem_map ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_memory_map_get'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_memory_mapPtr'};fcnNum=fcnNum+1;
%  void cd_memory_map_free ( cd_memory_map * mem_map ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='cd_memory_map_free'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cd_memory_mapPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_source_info_for_code_address ( coredbg * cd , cd_logical_address const * code_addr , cd_source_line_info * src_line_info ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_source_info_for_code_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 's_cd_source_line_infoPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_physical_file_path_for_code_address ( coredbg * cd , cd_logical_address const * code_addr , const char ** file_path ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_physical_file_path_for_code_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_logical_file_path_for_code_address ( coredbg * cd , cd_logical_address const * code_addr , const char ** compilation_directory , const char ** relative_file_name , const char ** absolute_file_name ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_logical_file_path_for_code_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'stringPtrPtr', 'stringPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_break_addresses_from_source_location ( coredbg * cd , const char * physical_file , const uint32_t line_number , cd_logical_address_list * addresses ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringuint32voidPtrThunk';fcns.name{fcnNum}='cd_get_break_addresses_from_source_location'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring', 'uint32', 'cd_logical_address_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_single_break_address_from_source_location ( coredbg * cd , const char * physical_file , const uint32_t line_number , cd_logical_address ** address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringuint32voidPtrThunk';fcns.name{fcnNum}='cd_get_single_break_address_from_source_location'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring', 'uint32', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_debug_instruction_info_from_source_location ( coredbg * cd , const char * physical_file , const uint32_t line_number , cd_debug_instruction_info ** debug_instruction_info , uint32_t * number_of_debug_instruction_infos ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringuint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_debug_instruction_info_from_source_location'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring', 'uint32', 's_cd_debug_instruction_infoPtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_free_debug_instruction_infos ( cd_debug_instruction_info ** infos , uint32_t number_of_debug_instruction_infos ); 
fcns.thunkname{fcnNum}='cd_errvoidPtruint32Thunk';fcns.name{fcnNum}='cd_free_debug_instruction_infos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_debug_instruction_infoPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_look_up_code_symbol_by_name ( coredbg * cd , char const * symbol_name , cd_logical_address_list * addresses ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='cd_look_up_code_symbol_by_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring', 'cd_logical_address_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_connect ( coredbg * cd , char const * core_uri ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringThunk';fcns.name{fcnNum}='cd_connect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring'};fcnNum=fcnNum+1;
%  cd_err cd_disconnect ( coredbg * cd ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_disconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr'};fcnNum=fcnNum+1;
%  bool cd_is_connected ( coredbg * cd ); 
fcns.thunkname{fcnNum}='boolvoidPtrThunk';fcns.name{fcnNum}='cd_is_connected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'s_coredbgPtr'};fcnNum=fcnNum+1;
%  cd_err cd_unwind_call_stack ( coredbg * cd , const uint32_t num_frames , cd_frame_list * frames ); 
fcns.thunkname{fcnNum}='cd_errvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='cd_unwind_call_stack'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'uint32', 's_cd_frame_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_call_stack ( coredbg * cd , cd_frame_list * frames ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_free_call_stack'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_frame_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_code_location_from_frame ( cd_frame * frame , cd_logical_address ** code_address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_code_location_from_frame'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_framePtr', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_call_site_location_from_frame ( cd_frame * frame , cd_logical_address ** code_address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_call_site_location_from_frame'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_framePtr', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_function_name_for_code_address ( coredbg * cd , cd_logical_address const * code_addr , const char ** function_name ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_function_name_for_code_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_types ( coredbg * cd , cd_types_list * type_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_types'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_types_listPtr'};fcnNum=fcnNum+1;
%  void cd_free_types ( cd_types_list * types_list ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='cd_free_types'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cd_types_listPtr'};fcnNum=fcnNum+1;
%  cd_type ** cd_unpack_types_list ( cd_types_list const * types_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_types_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_typePtrPtr'; fcns.RHS{fcnNum}={'cd_types_listPtr'};fcnNum=fcnNum+1;
%  cd_type * cd_access_type_element ( cd_type ** types , unsigned index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_access_type_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_typePtr'; fcns.RHS{fcnNum}={'s_cd_typePtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_get_kind_of_type ( cd_type * type , cd_type_kind * kind ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_kind_of_type'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'cd_type_kindPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_type_name ( cd_type * type , const char ** name ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_type_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_type_size ( cd_type * type , unsigned * size ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_type_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_type_cv_qualifiers ( cd_type * type , unsigned * cv_qualifiers ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_type_cv_qualifiers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_child_types ( cd_type * type , cd_types_list * child_types ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_child_types'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'cd_types_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_array_type_size ( cd_type * type , unsigned * num_elements ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_array_type_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_type_enumerator_descriptions ( cd_type * type , cd_enumerator_description ** enumerator_descriptions , unsigned * num_enumerators ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_type_enumerator_descriptions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'cd_enumerator_descriptionPtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  void cd_free_enumerator_descriptions ( cd_enumerator_description * enumerator_descriptions , unsigned num_enumerators ); 
fcns.thunkname{fcnNum}='voidvoidPtruint32Thunk';fcns.name{fcnNum}='cd_free_enumerator_descriptions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cd_enumerator_descriptionPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_get_function_return_type ( cd_type * type , cd_types_list * return_type ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_function_return_type'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'cd_types_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_is_member_bitfield ( cd_type * type , bool * result ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_is_member_bitfield'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'boolPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_type_bitfield_properties ( cd_type * type , cd_bitfield_properties * result ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_type_bitfield_properties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_typePtr', 'cd_bitfield_propertiesPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_compile_dir_list ( cd_symbolfile * symf , cd_compile_dir_list * compile_dir_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_compile_dir_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_symbolfilePtr', 's_cd_compile_dir_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_compile_dir_list ( cd_compile_dir_list * compile_dir_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_compile_dir_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_dir_listPtr'};fcnNum=fcnNum+1;
%  cd_compile_dir ** cd_unpack_compile_dir_list ( cd_compile_dir_list const * compile_dir_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_compile_dir_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_compile_dirPtrPtr'; fcns.RHS{fcnNum}={'s_cd_compile_dir_listPtr'};fcnNum=fcnNum+1;
%  cd_compile_dir * cd_access_compile_dir_element ( cd_compile_dir ** compile_dirs , unsigned index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_access_compile_dir_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_compile_dirPtr'; fcns.RHS{fcnNum}={'s_cd_compile_dirPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_get_compile_dir_path ( cd_compile_dir * comp_dir , const char ** comp_dir_path ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_compile_dir_path'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_dirPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_logical_path ( cd_compile_unit const * const compile_unit , char const ** const logical_path ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_logical_path'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_unitPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_physical_path ( cd_compile_unit const * const compile_unit , char const ** const logical_path ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_physical_path'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_unitPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_compile_units ( cd_compile_dir * comp_dir , cd_compile_unit_list * unit_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_compile_units'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_dirPtr', 's_cd_compile_unit_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_compile_units ( cd_compile_unit_list * unit_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_compile_units'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_unit_listPtr'};fcnNum=fcnNum+1;
%  cd_compile_unit ** cd_unpack_compile_unit_list ( cd_compile_unit_list const * compile_unit_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_compile_unit_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_compile_unitPtrPtr'; fcns.RHS{fcnNum}={'s_cd_compile_unit_listPtr'};fcnNum=fcnNum+1;
%  cd_compile_unit * cd_access_compile_unit_element ( cd_compile_unit ** compile_units , unsigned index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_access_compile_unit_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_compile_unitPtr'; fcns.RHS{fcnNum}={'s_cd_compile_unitPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_resolve_with_equivalent_paths ( coredbg * cd , const char * logical_path , const char * physical_path , const bool reserved_for_future , uint32_t * number_unresolved ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrcstringcstringboolvoidPtrThunk';fcns.name{fcnNum}='cd_resolve_with_equivalent_paths'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cstring', 'cstring', 'bool', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_functions ( cd_compile_unit * compile_unit , cd_function_list * functions ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_functions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_unitPtr', 's_cd_function_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_functions ( cd_function_list * functions ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_functions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_function_listPtr'};fcnNum=fcnNum+1;
%  cd_function ** cd_unpack_function_list ( cd_function_list const * function_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_function_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_functionPtrPtr'; fcns.RHS{fcnNum}={'s_cd_function_listPtr'};fcnNum=fcnNum+1;
%  cd_function * cd_access_function_element ( cd_function ** functions , unsigned index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_access_function_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_functionPtr'; fcns.RHS{fcnNum}={'s_cd_functionPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_get_function_name ( cd_function * function , char const ** const function_name ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_function_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_functionPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_function_line_number ( cd_function * function , int32_t * line_number ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_function_line_number'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_functionPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_get_function_address ( cd_function * function , cd_logical_address ** address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_function_address'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_functionPtr', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_add_symbol_file ( char const * file_path , coredbg * cd , cd_symbolfile ** symf ); 
fcns.thunkname{fcnNum}='cd_errcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_add_symbol_file'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cstring', 's_coredbgPtr', 's_cd_symbolfilePtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_elf_sections ( cd_symbolfile * symf , cd_elf_section_list * sections ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_elf_sections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_symbolfilePtr', 's_cd_elf_section_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_elf_sections ( cd_elf_section_list * sections ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_elf_sections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_elf_section_listPtr'};fcnNum=fcnNum+1;
%  cd_elf_section * cd_unpack_elf_section_list ( cd_elf_section_list const * sec_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_elf_section_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_elf_sectionPtr'; fcns.RHS{fcnNum}={'s_cd_elf_section_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_device_to_file_mappings ( coredbg * cd , unsigned address_space_index , cd_device_file_addr_mapping_list * mappings ); 
fcns.thunkname{fcnNum}='cd_errvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='cd_get_device_to_file_mappings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'uint32', 's_cd_device_file_addr_mapping_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_device_to_file_mappings ( cd_device_file_addr_mapping_list * mappings ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_device_to_file_mappings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_device_file_addr_mapping_listPtr'};fcnNum=fcnNum+1;
%  cd_device_file_addr_mapping * cd_unpack_device_to_file_mappings_list ( cd_device_file_addr_mapping_list const * mappings_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_device_to_file_mappings_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_device_file_addr_mappingPtr'; fcns.RHS{fcnNum}={'s_cd_device_file_addr_mapping_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_add_device_to_file_mapping ( cd_symbolfile * symf , cd_logical_address const * device_addr_begin , uint64_t file_addr_begin , uint64_t file_addr_end ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtruint64uint64Thunk';fcns.name{fcnNum}='cd_add_device_to_file_mapping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_symbolfilePtr', 'cd_logical_addressPtr', 'uint64', 'uint64'};fcnNum=fcnNum+1;
%  cd_err cd_remove_device_to_file_mapping ( coredbg * cd , cd_logical_address const * device_addr_begin ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_remove_device_to_file_mapping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 'cd_logical_addressPtr'};fcnNum=fcnNum+1;
%  cd_err cd_remove_symbol_file ( cd_symbolfile * symf ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_remove_symbol_file'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_symbolfilePtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_session_signatures ( coredbg * cd , cd_signature_list * signatures ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_session_signatures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_signature_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_session_signatures ( cd_signature_list * signatures ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_session_signatures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_signature_listPtr'};fcnNum=fcnNum+1;
%  cd_signature * cd_unpack_session_signatures_list ( cd_signature_list const * signature_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_session_signatures_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_signaturePtr'; fcns.RHS{fcnNum}={'s_cd_signature_listPtr'};fcnNum=fcnNum+1;
%  cd_variable ** cd_unpack_variables_list ( cd_variables_list const * variables_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_variables_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_variablePtrPtr'; fcns.RHS{fcnNum}={'s_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_variable * cd_access_variable_element ( cd_variable ** variables , unsigned index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='cd_access_variable_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_variablePtr'; fcns.RHS{fcnNum}={'s_cd_variablePtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_get_globals ( coredbg * cd , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_globals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_locals ( coredbg * cd , const cd_frame * frame , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_locals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_framePtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_formal_parameters ( coredbg * cd , const cd_frame * frame , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_formal_parameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_framePtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_variable_name ( cd_variable * variable , const char ** name ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_variable_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_variablePtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_variable_location_info ( coredbg * cd , cd_variable * variable , const char ** location_desc ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_variable_location_info'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_variable_lifetime_class ( cd_variable * variable , cd_variable_lifetime_classification * lifetime_class ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_variable_lifetime_class'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_variablePtr', 'cd_variable_lifetime_classificationPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_type_of_variable ( cd_variable * variable , cd_type ** type ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_type_of_variable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_variablePtr', 's_cd_typePtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_address_of_variable ( coredbg * cd , cd_variable * variable , cd_logical_address ** address ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_address_of_variable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 'cd_logical_addressPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_variables ( coredbg * cd , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_free_variables'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_child_variables ( cd_variable * variable , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_child_variables'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_variablePtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_variable_array_entries ( cd_variable * variable , const uint32_t entry_offset , const uint32_t count , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='cd_get_variable_array_entries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_variablePtr', 'uint32', 'uint32', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_clone_variable ( coredbg * cd , cd_variable * var , cd_variable ** cloned ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_clone_variable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 's_cd_variablePtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_cloned_variable ( coredbg * cd , cd_variable * cloned ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_free_cloned_variable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr'};fcnNum=fcnNum+1;
%  cd_err cd_variable_address_ranges ( coredbg * cd , cd_variable * variable , cd_address_ranges * ranges ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_variable_address_ranges'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 's_cd_address_rangesPtr'};fcnNum=fcnNum+1;
%  cd_address_range * cd_unpack_variable_address_ranges_list ( cd_address_ranges const * address_ranges_list ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_unpack_variable_address_ranges_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_cd_address_rangePtr'; fcns.RHS{fcnNum}={'s_cd_address_rangesPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_address_ranges ( cd_address_ranges * ranges ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_address_ranges'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_address_rangesPtr'};fcnNum=fcnNum+1;
%  cd_err cd_read_variable ( coredbg * cd , cd_variable * variable , const cd_variable_data ** const data_bytes ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_read_variable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 's_cd_variable_dataPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_write_variable ( coredbg * cd , cd_variable * variable , const cd_variable_data * const data_bytes ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_write_variable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 's_cd_variable_dataPtr'};fcnNum=fcnNum+1;
%  cd_err cd_variable_data_to_string ( const cd_variable_data_format fmt , const cd_variable_data * const data_bytes , const char ** formatted ); 
fcns.thunkname{fcnNum}='cd_errcd_variable_data_formatvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_variable_data_to_string'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_variable_data_format', 's_cd_variable_dataPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_variable_string_to_data ( const cd_variable_data_format fmt , const char * formatted , const cd_variable_data ** const data_bytes ); 
fcns.thunkname{fcnNum}='cd_errcd_variable_data_formatcstringvoidPtrThunk';fcns.name{fcnNum}='cd_variable_string_to_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'cd_variable_data_format', 'cstring', 's_cd_variable_dataPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_read_variable_as_string ( coredbg * cd , cd_variable * variable , const uint32_t max_chars_to_read , bool * null_term_reached , const cd_variable_data ** const data_bytes ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtruint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_read_variable_as_string'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variablePtr', 'uint32', 'boolPtr', 's_cd_variable_dataPtrPtr'};fcnNum=fcnNum+1;
%  cd_err cd_free_variable_data ( const cd_variable_data * const data ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrThunk';fcns.name{fcnNum}='cd_free_variable_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_variable_dataPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_asm_cu_variables ( coredbg * cd , const cd_frame * frame , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_asm_cu_variables'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_framePtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_file_scope_statics_by_frame ( coredbg * cd , const cd_frame * frame , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_file_scope_statics_by_frame'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_framePtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_active_variables ( coredbg * cd , const cd_frame * frame , const uint32_t lines_up , const uint32_t lines_down , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='cd_get_active_variables'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_framePtr', 'uint32', 'uint32', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_file_scope_statics ( cd_compile_unit * cu , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_file_scope_statics'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_unitPtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_file_globals ( cd_compile_unit * cu , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_file_globals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_compile_unitPtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_static_variables_from_function ( cd_function * function , cd_variables_list * variables_list ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_static_variables_from_function'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_cd_functionPtr', 's_cd_variables_listPtr'};fcnNum=fcnNum+1;
%  cd_err cd_get_qformat_bits ( coredbg * cd , cd_variable_data const * const var_data , uint32_t * const m_bits , uint32_t * const n_bits ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_qformat_bits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variable_dataPtr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  cd_err cd_set_qformat_bits ( coredbg * cd , cd_variable_data * var_data , uint32_t const m_bits , uint32_t const n_bits ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='cd_set_qformat_bits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variable_dataPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  cd_err cd_get_hexadecimal_settings ( coredbg * cd , cd_variable_data const * const var_data , bool * const show_base , bool * const pad_to_type_size , bool * const lower_case ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='cd_get_hexadecimal_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variable_dataPtr', 'boolPtr', 'boolPtr', 'boolPtr'};fcnNum=fcnNum+1;
%  cd_err cd_set_hexadecimal_settings ( coredbg * cd , cd_variable_data * var_data , bool const show_base , bool const pad_to_type_size , bool const lower_case ); 
fcns.thunkname{fcnNum}='cd_errvoidPtrvoidPtrboolboolboolThunk';fcns.name{fcnNum}='cd_set_hexadecimal_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cd_err'; fcns.RHS{fcnNum}={'s_coredbgPtr', 's_cd_variable_dataPtr', 'bool', 'bool', 'bool'};fcnNum=fcnNum+1;
structs.cd_version.members=struct('api_version', 'uint32', 'build_id', 'uint32', 'branch_change_id', 'uint32');
structs.s_coredbg.members=struct('');
structs.cd_address_space.members=struct('name', 'cstring', 'address_width_octets', 'uint32', 'data_width_octets', 'uint32', 'big_endian', 'bool', 'addressable_unit_size_octets', 'uint32');
structs.cd_logical_address.members=struct('');
structs.cd_logical_address_list.members=struct('num_addresses', 'uint32', 'addresses', 'cd_logical_addressPtrPtr');
structs.cd_memory_region.members=struct('name', 'cstring', 'start_address', 'cd_logical_addressPtr', 'last_address', 'cd_logical_addressPtr', 'attributes', 'uint32', 'backing_mem', 'cstring', 'natural_width_octets', 'uint32');
structs.cd_memory_region_list.members=struct('regions', 'cd_memory_regionPtr', 'num_regions', 'uint32');
structs.cd_memory_map.members=struct('regions_by_address_space', 'cd_memory_region_listPtr', 'num_spaces', 'uint32');
structs.s_cd_source_line_info.members=struct('line_number', 'uint32', 'column_number', 'uint32', 'language', 'cd_source_language');
structs.s_cd_debug_instruction_info.members=struct('address', 'cd_logical_addressPtr', 'column_number', 'uint32', 'is_stmt', 'bool', 'is_begin_basic_block', 'bool');
structs.s_cd_frame.members=struct('');
structs.s_cd_frame_list.members=struct('number_of_frames', 'uint32', 'frames', 's_cd_framePtrPtr');
structs.s_cd_type.members=struct('');
structs.cd_types_list.members=struct('number_of_types', 'uint32', 'types', 's_cd_typePtrPtr');
structs.cd_enumerator_description.members=struct('name', 'cstring', 'value', 'int32');
structs.cd_bitfield_properties.members=struct('bit_size', 'uint32', 'bit_offset', 'uint32', 'container_bit_size', 'uint32');
structs.s_cd_symbolfile.members=struct('');
structs.s_cd_compile_dir.members=struct('');
structs.s_cd_compile_dir_list.members=struct('number_of_compile_dirs', 'uint32', 'comp_dirs', 's_cd_compile_dirPtrPtr');
structs.s_cd_compile_unit.members=struct('');
structs.s_cd_compile_unit_list.members=struct('num_of_compile_units', 'uint32', 'num_of_unresolved', 'uint32', 'compile_units', 's_cd_compile_unitPtrPtr');
structs.s_cd_function.members=struct('');
structs.s_cd_function_list.members=struct('number_of_functions', 'uint32', 'functions', 's_cd_functionPtrPtr');
structs.s_cd_device_file_addr_mapping.members=struct('device_addr_begin', 'cd_logical_addressPtr', 'file_addr_begin', 'uint64', 'size_in_addressable_units', 'uint64', 'symf', 's_cd_symbolfilePtr');
structs.s_cd_device_file_addr_mapping_list.members=struct('number_of_mappings', 'uint32', 'mappings', 's_cd_device_file_addr_mappingPtr');
structs.s_cd_elf_section.members=struct('file_address', 'uint64', 'size', 'uint32', 'offset', 'uint32', 'flags', 'uint32', 'type', 'uint32', 'unit_size', 'uint32', 'section_name', 'cstring');
structs.s_cd_elf_section_list.members=struct('number_of_sections', 'uint32', 'sections', 's_cd_elf_sectionPtr');
structs.s_cd_signature.members=struct('symf', 's_cd_symbolfilePtr', 'file_signature', 'cstring', 'memory_read_err', 'cd_err', 'device_signature', 'cstring');
structs.s_cd_signature_list.members=struct('number_of_signatures', 'uint32', 'signatures', 's_cd_signaturePtr');
structs.s_cd_variable.members=struct('');
structs.s_cd_variables_list.members=struct('number_of_variables', 'uint32', 'variables', 's_cd_variablePtrPtr');
structs.s_cd_address_range.members=struct('low', 'cd_logical_addressPtr', 'high', 'cd_logical_addressPtr');
structs.s_cd_address_ranges.members=struct('number_of_ranges', 'uint32', 'ranges', 's_cd_address_rangePtr');
structs.s_cd_variable_data.members=struct('');
enuminfo.cd_variable_lifetime_classification=struct('CD_VAR_LIFETIME_LOCAL',0,'CD_VAR_LIFETIME_STATIC_LOCAL',1,'CD_VAR_LIFETIME_STATIC_FILESCOPE',2,'CD_VAR_LIFETIME_GLOBAL',3,'CD_VAR_LIFETIME_FORMAL_PARAMETER',4);
enuminfo.cd_type_kind=struct('CD_BASIC_TYPE',98,'CD_ARRAY_TYPE',97,'CD_POINTER_TYPE',112,'CD_STRUCT_TYPE',115,'CD_FUNCTION_TYPE',102,'CD_UNION_TYPE',117,'CD_MEMBER_TYPE',109,'CD_TYPEDEF_TYPE',116,'CD_ENUM_TYPE',101,'CD_PARAM_TYPE',120);
enuminfo.cd_source_language=struct('CD_LANG_UNKNOWN',0,'CD_LANG_ASM',1,'CD_LANG_C',2,'CD_LANG_C99',3,'CD_LANG_NONE',4);
enuminfo.cd_variable_data_format=struct('CD_VARIABLE_DATA_BLOB',0,'CD_VARIABLE_DATA_BINARYNUMBER',1,'CD_VARIABLE_DATA_OCTALNUMBER',2,'CD_VARIABLE_DATA_DECIMALNUMBER',3,'CD_VARIABLE_DATA_SIGNED_DECIMALNUMBER',4,'CD_VARIABLE_DATA_HEXADECIMALNUMBER',5,'CD_VARIABLE_DATA_SYMBOLICNAME',6,'CD_VARIABLE_DATA_CHARACTER',7,'CD_VARIABLE_DATA_ASCIISTRING',8,'CD_VARIABLE_DATA_SCIENTIFICFLOAT',9,'CD_VARIABLE_DATA_SHORTESTFLOAT',10,'CD_VARIABLE_DATA_Q_FORMAT_INT',11,'CD_VARIABLE_DATA_UQ_FORMAT_INT',12);
enuminfo.cd_memory_region_attributes=struct('CD_MEMORY_REGION_ATTR_NONE',0,'CD_MEMORY_REGION_ATTR_CONTENTS_HINT_CODE',1,'CD_MEMORY_REGION_ATTR_CONTENTS_HINT_DATA',2,'CD_MEMORY_REGION_ATTR_CONTENTS_HINT_REGISTERS',4,'CD_MEMORY_REGION_ATTR_READ_ONLY',8,'CD_MEMORY_REGION_ATTR_HAS_READ_SENSITIVE_AREAS',16,'CD_MEMORY_REGION_ATTR_SHARED',32);
enuminfo.cd_err=struct('CD_ERR_NO_ERROR',0,'CD_ERR_TRANSPORT_ERROR',1,'CD_ERR_CORE_STATE_CHANGE_CALLBACK_ALREADY_REGISTERED',2,'CD_ERR_COULD_NOT_REGISTER_STATE_CHANGE_CALLBACK',3,'CD_ERR_TRANSPORT_DEAD',4,'CD_ERR_CORE_POWER_OFF',5,'CD_ERR_INVALID_ELF_FILE',6,'CD_ERR_DUPLICATE_SYMBOLFILE',7,'CD_ERR_INCOMPATIBLE_ARCHITECTURES',8,'CD_ERR_OVERLAP_DEVICE_ADDR',9,'CD_ERR_INVALID_FILE_ADDR',10,'CD_ERR_INVALID_DEVICE_ADDR',11,'CD_ERR_INVALID_PARAMETER',12,'CD_ERR_CHIP_ACCESS',13,'CD_ERR_ALREADY_CONNECTED',14,'CD_ERR_INVALID_CORE_URI',15,'CD_ERR_REQUIRES_CONNECTION',16,'CD_ERR_INVALID_FRAME',17,'CD_ERR_CORE_NOT_PAUSED',18,'CD_ERR_NO_SOURCE_INFO_FOR_ADDR',19,'CD_ERR_ADDRESS_SPACES_NOT_DETERMINED',20,'CD_ERR_INVALID_ACCESS_SIZE',21,'CD_ERR_MEMORY_REGION_DATA_UNAVAILABLE',22,'CD_ERR_DISASSEMBLY_FAILED',23,'CD_ERR_DISASSEMBLY_HIT_ADDRESS_SPACE_LIMIT',24,'CD_ERR_NOT_EXPECTED_CHIP',25,'CD_ERR_INVALID_PATH_SEPARATOR',26,'CD_ERR_BAD_PHYSICAL_PATH',27,'CD_ERR_NEED_ABSOLUTE_PATH',28,'CD_ERR_BAD_LOGICAL_PATH',29,'CD_ERR_NO_SYMBOLFILE_FOR_ADDR',30,'CD_ERR_NO_SYMBOLFILES_LOADED',31,'CD_ERR_COULD_NOT_OPEN_LOG',32,'CD_ERR_INSUFFICIENT_FREE_BREAKPOINTS',33,'CD_ERR_NO_BREAKPOINT_FOUND',34,'CD_ERR_DATA_BP_RANGE_NOT_SUPPORTED',35,'CD_ERR_BAD_DWARF_INFO',36,'CD_ERR_CANT_RESOLVE_INCLUDED_FILE',37,'CD_ERR_CANT_RESOLVE_FILE',38,'CD_ERR_NO_CODE_AT_SOURCE_LINE',39,'CD_ERR_NO_CODE_AT_SOURCE_FILE',40,'CD_ERR_CANT_FIND_COMPILE_UNIT',41,'CD_ERR_DEVICE_ADDRESS_NOT_MAPPED',42,'CD_ERR_NON_APPLICABLE_TYPE',43,'CD_ERR_INVALID_VARIABLE_HANDLE',44,'CD_ERR_INVALID_TYPE_HANDLE',45,'CD_ERR_NO_CHILD_ELEMENTS',46,'CD_ERR_VARIABLE_OUT_OF_SCOPE',47,'CD_ERR_VARIABLE_DECODE_UNSUPPORTED',48,'CD_ERR_VARIABLE_HAS_NO_LOCATION',49,'CD_ERR_STEP_TOOK_TOO_LONG',50,'CD_ERR_NEED_CORE_STATE_CHANGE_MONITORING',51,'CD_ERR_COULD_NOT_ALLOCATE_RESOURCES',52,'CD_ERR_FORMAT_VARIABLE',53,'CD_ERR_TYPE_INCOMPLETE',54,'CD_ERR_COULD_NOT_DETERMINE_INSN_SET',55,'CD_ERR_PARSE_VARIABLE_INVALID_CHAR',56,'CD_ERR_PARSE_VARIABLE_INT_OVERFLOW',57,'CD_ERR_ELF_PROCESSING_FAILED',58,'CD_ERR_CHILD_VARIABLE_HAS_NO_NAME',59,'CD_ERR_INVALID_ARRAY_OFFSET',60,'CD_ERR_VARIABLE_ONLY_REGISTER_LOCATION',61,'CD_ERR_FUNC_PARAM_CHILD_VARIABLE_NO_LOCATION',62,'CD_ERR_NAMELESS_FIELD',63,'CD_ERR_ZEROSIZED_FIELD',64,'CD_ERR_UNPRINTABLE_CHAR',65,'CD_ERR_INSUFFICIENT_VARIABLE_DATA',66,'CD_ERR_MAX_STRING_LENGTH_EXCEEDED',67,'CD_ERR_INVALID_DWARF_REGISTER',68,'CD_ERR_UNEXPECTED_COMPOUND_DWARF_REGISTER',69,'CD_ERR_VARIABLE_HAS_NO_LOCATION_AT_PC',70,'CD_ERR_STALE_FRAME',71,'CD_ERR_REGISTER_SAME_IN_CALLER',72,'CD_ERR_INVALID_LOGICAL_DIRECTORY_MAPPING',73,'CD_ERR_UNKNOWN_FILE_AT_ADDR',74,'CD_ERR_STEP_OUT_COULD_NOT_FIND_RETURN_ADDRESS',75,'CD_ERR_UNSUITABLE_VARIABLE_LOCATION',76,'CD_ERR_ELIMINATED_ENTRY',77,'CD_ERR_LOADER_ALREADY_CONFIGURED',78,'CD_ERR_UNSUPPORTED_LOADER',79,'CD_ERR_SYMBOLFILE_LOADER_MISMATCH',80,'CD_ERR_LOADER_DEVICE_FILE_MAPPING_TABLE',81,'CD_ERR_NO_ELF_SIGNATURE',82,'CD_ERR_DYN_LOADER_FILE_MUST_BE_MAPPED',83,'CD_ERR_NO_DWARF_PARSE',84,'CD_ERR_BAD_LOADER_DEVICE_MAPPING_TABLE_ADDRESS',85,'CD_ERR_NO_SYMBOL_TABLE',86,'CD_ERR_NO_LOADER',87,'CD_ERR_NO_LOADER_ENTRY',88,'CD_ERR_INCORRECT_SOURCE_LANGUAGE',89,'CD_ERR_NOT_IMPLEMENTED',90,'CD_ERR_NO_PARSER',91,'CD_ERR_CANT_OPEN_FILE',92,'CD_ERR_LANGUAGE_PARSE_FAILURE',93,'CD_ERR_COULD_NOT_FIND_FUNCTION_IN_TEXT',94,'CD_ERR_INVALID_DECLARATION_COORDINATES',95,'CD_ERR_CANT_READ_FILE',96,'CD_ERR_RUN_CONTROL_OP_ALREADY_IN_PROGRESS',97,'CD_ERR_SESSION_USE_AFTER_COMMS_ERROR',98,'CD_ERR_CORE_ALREADY_PAUSED',99,'CD_ERR_NO_RUN_CONTROL_OPERATION_IN_PROGRESS',100,'CD_ERR_USING_EVENT_API',101,'CD_ERR_DONT_CALL_FROM_MONITORING_THREAD',102,'CD_ERR_CANT_SEEK_FILE',103,'CD_ERR_VARIABLE_ADDRESS_INCONSISTENCY',104,'CD_ERR_INVALID_FRAMES',105,'CD_ERR_INVALID_NUM_FRAMES',106,'CD_ERR_MAPPING_ALREADY_PRESENT',107,'CD_ERR_NOT_AN_ELF',108,'CD_ERR_ELF_STRTAB',109,'CD_ERR_ELF_MEMORY',110,'CD_ERR_ELF_VERSION',111,'CD_ERR_ELF_KIND',112,'CD_ERR_LOGICAL_ADDRESSES_INCOMPATIBLE',113,'CD_ERR_FILE_IS_BEING_WRITTEN',114,'CD_ERR_ELF_READ_FAILED_BUT_FILE_SEEMS_TO_EXIST',115,'CD_ERR_VARIABLE_DATA_HAS_NO_VARIABLE',116,'CD_ERR_TARGET_PROGRAM_CANT_ACCESS_SPACE',117,'CD_ERR_MEMORY_MAP_FILE_LOAD_NOT_IMPLEMENTED',118,'CD_ERR_NO_APPLICABLE_MEMORY_MAP_FILE_FOUND',119,'CD_ERR_COULD_NOT_OPEN_MEMORY_MAP_FILE',120,'CD_ERR_NO_APPLICABLE_MEMORY_MAP_FOUND_IN_FILE',121,'CD_ERR_MEMORY_MAP_PARSE_ERROR',122,'CD_ERR_PARENT_LOCATED_IN_INACCESSIBLE_SPACE',123,'CD_ERR_FILE_ADDR_HAS_NO_ASSOCIATED_ADDRESS_SPACE',124,'CD_ERR_INVALID_ELF_MACHINE_ID',125,'CD_ERR_SESSION_IS_COMPLETE',126,'CD_ERR_NO_CALL_SITE_FOR_FRAME_ZERO',127,'CD_ERR_UNKNOWN_ARCHITECTURE',128,'CD_ERR_CANT_FIND_CALL_INSTRUCTION',129,'CD_ERR_CANT_FIND_LAST_PREFIX_BEFORE_CALL',130,'CD_ERR_NON_TRIVIAL_LOCATION',131,'CD_ERR_RSP_TIMEOUT',132,'CD_ERR_RSP_FAILED_TO_CONNECT',133,'CD_ERR_RSP_SERVER_EXIT',134,'CD_ERR_RSP_INVALID_PACKET',135,'CD_ERR_RSP_INVALID_CHECKSUM',136,'CD_ERR_RSP_INVALID_RESPONSE',137,'CD_ERR_RSP_IO_ERROR',138,'CD_ERR_RSP_FATAL_IO_ERROR',139,'CD_ERR_RSP_E_ERROR',140,'CD_ERR_RSP_PACKET_TOO_BIG',141,'CD_ERR_NO_FRAME_BASE_ATTRIB',142,'CD_ERR_GLOBAL_CANNOT_BE_FRAME_BASED',143,'CD_ERR_NO_GLOBALS_ACCELERATOR_TABLE',144,'CD_ERR_CANT_WRITE_TO_IMPLICIT_VALUE_LOCATION',145,'CD_ERR_CANT_WRITE_TO_EMPTY_LOCATION',146,'CD_ADDRESS_OBJECT_FROM_COMPLETE_SESSION',147);
methodinfo=fcns;